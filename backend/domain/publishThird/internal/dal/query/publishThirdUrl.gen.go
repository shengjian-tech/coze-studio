// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/coze-dev/coze-studio/backend/domain/publishThird/internal/dal/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"gorm.io/plugin/dbresolver"
)

func newPublishThirdUrl(db *gorm.DB, opts ...gen.DOOption) publishThirdUrl {
	_publishThirdUrl := publishThirdUrl{}

	_publishThirdUrl.publishThirdUrlDo.UseDB(db, opts...)
	_publishThirdUrl.publishThirdUrlDo.UseModel(&model.PublishThirdUrl{})

	tableName := _publishThirdUrl.publishThirdUrlDo.TableName()
	_publishThirdUrl.ALL = field.NewAsterisk(tableName)
	_publishThirdUrl.ID = field.NewInt64(tableName, "id")
	_publishThirdUrl.Introduction = field.NewString(tableName, "introduction")
	_publishThirdUrl.Url = field.NewString(tableName, "url")
	_publishThirdUrl.CreatedAt = field.NewInt64(tableName, "created_at")
	_publishThirdUrl.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_publishThirdUrl.Status = field.NewInt32(tableName, "status")
	_publishThirdUrl.UrlType = field.NewInt32(tableName, "UrlType")
	_publishThirdUrl.CreatorID = field.NewInt64(tableName, "creator_id")

	_publishThirdUrl.fillFieldMap()

	return _publishThirdUrl
}

// knowledge knowledge tabke
type publishThirdUrl struct {
	publishThirdUrlDo

	ALL          field.Asterisk
	ID           field.Int64  // id
	Introduction field.String // knowledge's name
	Url          field.String
	CreatedAt    field.Int64 // Create Time in Milliseconds
	UpdatedAt    field.Int64 // Update Time in Milliseconds
	Status       field.Int32 // 0 initialization, 1 effective, 2 invalid
	UrlType      field.Int32 // 1 小红书
	CreatorID    field.Int64 // creator id
	fieldMap     map[string]field.Expr
}

func (k *publishThirdUrl) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 12)
	k.fieldMap["id"] = k.ID
	k.fieldMap["Introduction"] = k.Introduction
	k.fieldMap["Url"] = k.Url
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
	k.fieldMap["status"] = k.Status
	k.fieldMap["UrlType"] = k.UrlType
	k.fieldMap["creator_id"] = k.CreatorID
}

type publishThirdUrlDo struct{ gen.DO }

type IpublishThirdUrlDo interface {
	gen.SubQuery
	Debug() IpublishThirdUrlDo
	WithContext(ctx context.Context) IpublishThirdUrlDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IpublishThirdUrlDo
	WriteDB() IpublishThirdUrlDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IpublishThirdUrlDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IpublishThirdUrlDo
	Not(conds ...gen.Condition) IpublishThirdUrlDo
	Or(conds ...gen.Condition) IpublishThirdUrlDo
	Select(conds ...field.Expr) IpublishThirdUrlDo
	Where(conds ...gen.Condition) IpublishThirdUrlDo
	Order(conds ...field.Expr) IpublishThirdUrlDo
	Distinct(cols ...field.Expr) IpublishThirdUrlDo
	Omit(cols ...field.Expr) IpublishThirdUrlDo
	Join(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo
	RightJoin(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo
	Group(cols ...field.Expr) IpublishThirdUrlDo
	Having(conds ...gen.Condition) IpublishThirdUrlDo
	Limit(limit int) IpublishThirdUrlDo
	Offset(offset int) IpublishThirdUrlDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IpublishThirdUrlDo
	Unscoped() IpublishThirdUrlDo
	Create(values ...*model.PublishThirdUrl) error
	CreateInBatches(values []*model.PublishThirdUrl, batchSize int) error
	Save(values ...*model.PublishThirdUrl) error
	First() (*model.PublishThirdUrl, error)
	Take() (*model.PublishThirdUrl, error)
	Last() (*model.PublishThirdUrl, error)
	Find() ([]*model.PublishThirdUrl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishThirdUrl, err error)
	FindInBatches(result *[]*model.PublishThirdUrl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishThirdUrl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IpublishThirdUrlDo
	Assign(attrs ...field.AssignExpr) IpublishThirdUrlDo
	Joins(fields ...field.RelationField) IpublishThirdUrlDo
	Preload(fields ...field.RelationField) IpublishThirdUrlDo
	FirstOrInit() (*model.PublishThirdUrl, error)
	FirstOrCreate() (*model.PublishThirdUrl, error)
	FindByPage(offset int, limit int) (result []*model.PublishThirdUrl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IpublishThirdUrlDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k publishThirdUrlDo) Debug() IpublishThirdUrlDo {
	return k.withDO(k.DO.Debug())
}

func (k publishThirdUrlDo) WithContext(ctx context.Context) IpublishThirdUrlDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k publishThirdUrlDo) ReadDB() IpublishThirdUrlDo {
	return k.Clauses(dbresolver.Read)
}

func (k publishThirdUrlDo) WriteDB() IpublishThirdUrlDo {
	return k.Clauses(dbresolver.Write)
}

func (k publishThirdUrlDo) Session(config *gorm.Session) IpublishThirdUrlDo {
	return k.withDO(k.DO.Session(config))
}

func (k publishThirdUrlDo) Clauses(conds ...clause.Expression) IpublishThirdUrlDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k publishThirdUrlDo) Returning(value interface{}, columns ...string) IpublishThirdUrlDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k publishThirdUrlDo) Not(conds ...gen.Condition) IpublishThirdUrlDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k publishThirdUrlDo) Or(conds ...gen.Condition) IpublishThirdUrlDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k publishThirdUrlDo) Select(conds ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k publishThirdUrlDo) Where(conds ...gen.Condition) IpublishThirdUrlDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k publishThirdUrlDo) Order(conds ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k publishThirdUrlDo) Distinct(cols ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k publishThirdUrlDo) Omit(cols ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k publishThirdUrlDo) Join(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k publishThirdUrlDo) LeftJoin(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k publishThirdUrlDo) RightJoin(table schema.Tabler, on ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k publishThirdUrlDo) Group(cols ...field.Expr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k publishThirdUrlDo) Having(conds ...gen.Condition) IpublishThirdUrlDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k publishThirdUrlDo) Limit(limit int) IpublishThirdUrlDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k publishThirdUrlDo) Offset(offset int) IpublishThirdUrlDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k publishThirdUrlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IpublishThirdUrlDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k publishThirdUrlDo) Unscoped() IpublishThirdUrlDo {
	return k.withDO(k.DO.Unscoped())
}

func (k publishThirdUrlDo) Create(values ...*model.PublishThirdUrl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k publishThirdUrlDo) CreateInBatches(values []*model.PublishThirdUrl, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k publishThirdUrlDo) Save(values ...*model.PublishThirdUrl) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k publishThirdUrlDo) First() (*model.PublishThirdUrl, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishThirdUrl), nil
	}
}

func (k publishThirdUrlDo) Take() (*model.PublishThirdUrl, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishThirdUrl), nil
	}
}

func (k publishThirdUrlDo) Last() (*model.PublishThirdUrl, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishThirdUrl), nil
	}
}

func (k publishThirdUrlDo) Find() ([]*model.PublishThirdUrl, error) {
	result, err := k.DO.Find()
	return result.([]*model.PublishThirdUrl), err
}

func (k publishThirdUrlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishThirdUrl, err error) {
	buf := make([]*model.PublishThirdUrl, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k publishThirdUrlDo) FindInBatches(result *[]*model.PublishThirdUrl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k publishThirdUrlDo) Attrs(attrs ...field.AssignExpr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k publishThirdUrlDo) Assign(attrs ...field.AssignExpr) IpublishThirdUrlDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k publishThirdUrlDo) Joins(fields ...field.RelationField) IpublishThirdUrlDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k publishThirdUrlDo) Preload(fields ...field.RelationField) IpublishThirdUrlDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k publishThirdUrlDo) FirstOrInit() (*model.PublishThirdUrl, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishThirdUrl), nil
	}
}

func (k publishThirdUrlDo) FirstOrCreate() (*model.PublishThirdUrl, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishThirdUrl), nil
	}
}

func (k publishThirdUrlDo) FindByPage(offset int, limit int) (result []*model.PublishThirdUrl, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k publishThirdUrlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k publishThirdUrlDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k publishThirdUrlDo) Delete(models ...*model.PublishThirdUrl) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *publishThirdUrlDo) withDO(do gen.Dao) *publishThirdUrlDo {
	k.DO = *do.(*gen.DO)
	return k
}
